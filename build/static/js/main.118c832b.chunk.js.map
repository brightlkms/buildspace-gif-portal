{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","response","publicKey","toString","alert","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","handleUpvote","index","provider","program","Program","rpc","upVote","BN","accounts","user","wallet","getGifList","sendGif","addGif","useEffect","onLoad","addEventListener","removeEventListener","account","fetch","createGifAccount","startStuffOff","systemProgram","programId","signers","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","style","display","justifyContent","margin","color","likes","toNumber","cursor","src","gifLink","alt","userAddress","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.118c832b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useState, useEffect } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3, BN } from \"@project-serum/anchor\";\nimport kp from \"./keypair.json\";\nconst { SystemProgram, Keypair } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n\n  const TEST_GIFS = [\n    \"https://media1.giphy.com/media/3ohzdD7eLeRtCqZsR2/giphy.gif?cid=ecf05e470eu3mqdq16ioooyk2eocvg4jwdvqcx2tby4zk7yg&rid=giphy.gif&ct=g\",\n    \"https://media4.giphy.com/media/xUPGcC4A6ElcqtUJck/giphy.gif?cid=790b761112f588b94579f0bf108b9e88c8b2a8b1fc3e4e93&rid=giphy.gif&ct=g\",\n    \"https://media2.giphy.com/media/lsdd32H2EqjXGRhWu4/giphy.gif?cid=ecf05e47guphsi61s6x3oi3nbc6k4gzis1qml9licj1bwfba&rid=giphy.gif&ct=g\",\n    \"https://media4.giphy.com/media/XFLSzB1E7gYdW/giphy.gif?cid=ecf05e47z9zt0u62pke1iclwrajeza3cabodycvgaz5a4bkm&rid=giphy.gif&ct=g\",\n  ];\n  // check if connected to Phantom\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom connected\");\n\n          const response = await solana.connect();\n          console.log(\"Connected with Pub Key\", response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Solana object not found! Get Phantom Wallet\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    return checkIfWalletIsConnected();\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const handleUpvote = async (index) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.upVote(new BN(index), {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      getGifList();\n    } catch (error) {\n      console.log(\"Upvote error\", error);\n    }\n  };\n\n  const sendGif = async () => {\n    // if (inputValue.length === 0) {\n    //   console.log(\"No gif link given!\");\n    //   return;\n    // }\n    // setInputValue(\"\");\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    margin: 16,\n                  }}\n                >\n                  <span style={{ color: \"white\" }}>\n                    Likes: {item.likes.toNumber()}\n                  </span>\n                  <div\n                    style={{\n                      color: \"white\",\n                      margin: \"0 8px\",\n                      cursor: \"pointer\",\n                    }}\n                    onClick={() => handleUpvote(index)}\n                  >\n                    Up\n                  </div>\n                </div>\n                <img src={item.gifLink} alt={index} />\n                <span style={{ color: \"white\" }}>\n                  contributor: {item.userAddress.toString()}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList \", error);\n      setGifList(null);\n    }\n  };\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF\");\n\n      //Call Solana Program\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse ✨\n          </p>\n        </div>\n        {walletAddress\n          ? renderConnectedContainer()\n          : renderNotConnectedContainer()}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}